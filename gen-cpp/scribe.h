/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef scribe_H
#define scribe_H

#include "thrift/TDispatchProcessor.h"
#include "scribe_types.h"
#include "FacebookService.h"

namespace scribe { namespace thrift {

class scribeIf : virtual public  ::facebook::fb303::FacebookServiceIf {
 public:
  virtual ~scribeIf() {}
  virtual ResultCode::type Log(const std::vector<LogEntry> & messages) = 0;
};

class scribeIfFactory : virtual public  ::facebook::fb303::FacebookServiceIfFactory {
 public:
  typedef scribeIf Handler;

  virtual ~scribeIfFactory() {}

  virtual scribeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::facebook::fb303::FacebookServiceIf* /* handler */) = 0;
};

class scribeIfSingletonFactory : virtual public scribeIfFactory {
 public:
  scribeIfSingletonFactory(const boost::shared_ptr<scribeIf>& iface) : iface_(iface) {}
  virtual ~scribeIfSingletonFactory() {}

  virtual scribeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::facebook::fb303::FacebookServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<scribeIf> iface_;
};

class scribeNull : virtual public scribeIf , virtual public  ::facebook::fb303::FacebookServiceNull {
 public:
  virtual ~scribeNull() {}
  ResultCode::type Log(const std::vector<LogEntry> & /* messages */) {
    ResultCode::type _return = (ResultCode::type)0;
    return _return;
  }
};

typedef struct _scribe_Log_args__isset {
  _scribe_Log_args__isset() : messages(false) {}
  bool messages;
} _scribe_Log_args__isset;

class scribe_Log_args {
 public:

  scribe_Log_args() {
  }

  virtual ~scribe_Log_args() throw() {}

  std::vector<LogEntry>  messages;

  _scribe_Log_args__isset __isset;

  void __set_messages(const std::vector<LogEntry> & val) {
    messages = val;
  }

  bool operator == (const scribe_Log_args & rhs) const
  {
    if (!(messages == rhs.messages))
      return false;
    return true;
  }
  bool operator != (const scribe_Log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scribe_Log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scribe_Log_pargs {
 public:


  virtual ~scribe_Log_pargs() throw() {}

  const std::vector<LogEntry> * messages;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scribe_Log_result__isset {
  _scribe_Log_result__isset() : success(false) {}
  bool success;
} _scribe_Log_result__isset;

class scribe_Log_result {
 public:

  scribe_Log_result() : success((ResultCode::type)0) {
  }

  virtual ~scribe_Log_result() throw() {}

  ResultCode::type success;

  _scribe_Log_result__isset __isset;

  void __set_success(const ResultCode::type val) {
    success = val;
  }

  bool operator == (const scribe_Log_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const scribe_Log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scribe_Log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scribe_Log_presult__isset {
  _scribe_Log_presult__isset() : success(false) {}
  bool success;
} _scribe_Log_presult__isset;

class scribe_Log_presult {
 public:


  virtual ~scribe_Log_presult() throw() {}

  ResultCode::type* success;

  _scribe_Log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class scribeClient : virtual public scribeIf, public  ::facebook::fb303::FacebookServiceClient {
 public:
  scribeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::facebook::fb303::FacebookServiceClient(prot, prot) {}
  scribeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::facebook::fb303::FacebookServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  ResultCode::type Log(const std::vector<LogEntry> & messages);
  void send_Log(const std::vector<LogEntry> & messages);
  ResultCode::type recv_Log();
};

class scribeProcessor : public  ::facebook::fb303::FacebookServiceProcessor {
 protected:
  boost::shared_ptr<scribeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (scribeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  scribeProcessor(boost::shared_ptr<scribeIf> iface) :
     ::facebook::fb303::FacebookServiceProcessor(iface),
    iface_(iface) {
    processMap_["Log"] = &scribeProcessor::process_Log;
  }

  virtual ~scribeProcessor() {}
};

class scribeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  scribeProcessorFactory(const ::boost::shared_ptr< scribeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< scribeIfFactory > handlerFactory_;
};

class scribeMultiface : virtual public scribeIf, public  ::facebook::fb303::FacebookServiceMultiface {
 public:
  scribeMultiface(std::vector<boost::shared_ptr<scribeIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<scribeIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::facebook::fb303::FacebookServiceMultiface::add(*iter);
    }
  }
  virtual ~scribeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<scribeIf> > ifaces_;
  scribeMultiface() {}
  void add(boost::shared_ptr<scribeIf> iface) {
     ::facebook::fb303::FacebookServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  ResultCode::type Log(const std::vector<LogEntry> & messages) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Log(messages);
    }
    return ifaces_[i]->Log(messages);
  }

};

}} // namespace

#endif
